(ql:quickload "cl-charms")
(defparameter *height* 10)
(defparameter *width* 10)
(defparameter *entities* nil)
(setq *world* (progn
		(let ((world nil))
		  (loop for x to *height*
			do (loop for y to *width*
				 do (setq world (acons (list x y) 'floor world))))
		  world)))
(defstruct entity
  (hp 10)
  (name "Casimir")
  (x nil)
  (y nil)
  (type 'mob)
  (strength 10)
  (dexterity 10)
  (consitution 10)
  (intelligence 10)
  (wisdom 10)
  (charisma 10)
  (luck 10)
  (easter-egg -10)
  (magic 0))
(defun register-entity (entity &rest keywords)
  (setf *entities* (acons entity (apply #'make-entity keywords) *entities*)))
(defun get-entity-val (entity val)
  (funcall (intern (concatenate 'string "ENTITY-" (string val))) (get-entity entity)))
(defun entity-gen () nil)
(defun player-gen (&key (name "Casimir") (hp 20) (magic 16)
		(type 'player) (y (random *height*)) (x (random *width*)))
	(make-entity :hp hp :magic magic :type type :x x :y y :name name))
(defun create-stock-entities ()
  (register-entity 'player :name "The Choosen One" :x (random *width*) :y (random *height*))
  (register-entity 'mob :name "The Mob One" :x (random *width*) :y (random *height*)))
(defun draw-map (entities world)
  (loop for y to *height*
	do (loop for x to *width*
		 do (princ (cond ((equal `(,x . ,y) (get-coord 'player)) #\@)
				 ((equal `(,x . ,y) (get-coord 'mob)) #\M)
				 (t #\.))))
		(fresh-line)))
(defun get-coord (entity)
  `(,(entity-x (get-entity entity)) . ,(entity-y (get-entity entity))))
(defun set-coord (entity coord)
  (setf (entity-x (get-entity entity)) (car coord))
  (setf (entity-y (get-entity entity)) (cdr coord)))
(defun set-coord-relative (entity dir &optional (x 1))
  (case dir 
	('up (decf (entity-y (get-entity entity)) x))
	('down (incf (entity-y (get-entity entity)) x))
	('left (decf (entity-x (get-entity entity)) x))
	('right (incf (entity-x (get-entity entity)) x))))
(defun walk (entity dir &optional (x 1))
  (cond ((<= (entity-dexterity (get-entity entity)) x)
	 (set-coord-relative (get-entity entity) dir x))))
(defun get-entity (entity)
	(cdr (assoc entity *entities*)))
(defun main ()
	(create-stock-entities)
	(setf *yoyo* "")
	(loop
		(draw-map *entities* *world*)
		(fresh-line)
		(princ *yoyo*)
		(fresh-line)
		(print *yoyo*)
		(fresh-line)
		(let ((cmd (read-char)))
			(cond ((equal cmd #\w) (walk 'player 'up))
				((equal cmd #\a) (walk 'player 'left))
				((equal cmd #\s) (walk 'player 'down))
				((equal cmd #\d) (walk 'player 'right))
				((equal cmd #\h) (entity-hp (get-entity 'player)))
				((equal cmd #\Newline) (go
				(t (setf *yoyo* cmd))))))))
(defun curses ()
	(let ((stdscr (cl-charms:initscr)))
		(cl-charms:raw)
		(cl-charms:keypad stdscr 1)
		(cl-charms:noecho)
		(setf str "")
		(cl-charms:getstr str)
		(cl-charms:printw str)
		(cl-charms:refresh)
		(cl-charms:endwin)))
(defun clock ()
  (charms:initscr)
  (charms:clear)
  (charms:curs-set 0)
  (loop with start = (get-universal-time)
        do (multiple-value-bind (s m h) (get-decoded-time)
             (charms:mvaddstr 0 0 (format nil "~2,'0d:~2,'0d:~2,'0d" h m s)))
           (charms:refresh)
        until (>= (- (get-universal-time) start) 10))
  (charms:endwin))