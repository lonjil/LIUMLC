(ql:quickload "cffi")
(pushnew (truename ".") cffi:*foreign-library-directories*)
(ql:quickload "cl-charms")

(defvar *version* (write-to-string (get-universal-time)))

(defparameter *height* 10)
(defparameter *width* 10)
(defvar *fps* 0)
(defvar *frames* 0)
(defvar *entities* (make-hash-table :test #'equal))
(defvar *messages* ())
(defvar *message-row* 0)
(defvar *message-history* ())
(setq *world* (progn
		(let ((world nil))
		  (loop for x to *height*
			do (loop for y to *width*
				 do (setq world (acons (cons x y) 'floor world))))
		  world)))
(defstruct entity
  (hp 10)
  (name "Casimir")
  (x nil)
  (y nil)
  (type 'mob)
  (strength 10)
  (dexterity 10)
  (consitution 10)
  (intelligence 10)
  (wisdom 10)
  (charisma 10)
  (luck 10)
  (easter-egg -10)
  (magic 0))
(defun register-entity (entity &rest keywords)
  (setf (get-entity entity) (apply #'make-entity keywords)))
(defun get-entity-val (entity val)
  (funcall (intern (concatenate 'string "ENTITY-" (string val))) (get-entity entity)))
(defun entity-gen () nil)
(defun player-gen (&key (name "Casimir") (hp 20) (magic 16)
		(type 'player) (y (random *height*)) (x (random *width*)))
	(make-entity :hp hp :magic magic :type type :x x :y y :name name))
(defun create-stock-entities ()
  (register-entity 'player :name "The Choosen One" :x (random *width*) :y (random *height*))
  (register-entity 'mob :name "The Mob One" :x (random *width*) :y (random *height*)))
(defun draw-map (y1 x1)
  (loop for y to *height* and y-curs from y1 to (+ *height* y1 -1)
	do (loop for x to *width* and x-curs from x1 to (+ *width* x1 -1)
		do (charms:move y-curs x-curs)
		(charms:printw (string
				(cond ((equal `(,x . ,y) (get-coord 'player)) #\@)
					((equal `(,x . ,y) (get-coord 'mob)) #\M)
					((equal (cdr (assoc `(,x . ,y) *world* :test #'equal)) 'floor)  #\.)
					(t #\Space)))))))
(defun entity-distance (ent-1 ent-2)
	(let ((ent-1-x (entity-x (get-entity ent-1)))
			(ent-1-y (entity-y (get-entity ent-1)))
			(ent-2-x (entity-x (get-entity ent-2)))
			(ent-2-y (entity-y (get-entity ent-2))))
		(sqrt (+ (expt (- ent-2-x ent-1-x) 2) (expt (- ent-2-y ent-1-y) 2)))))
(defun attack (attacker attackee)
	(if (<= (entity-distance attacker attackee) 1)
		(decf (entity-hp (get-entity attackee)))
		(push "You are too far away" *messages*)))
(defun get-coord (entity)
  `(,(entity-x (get-entity entity)) . ,(entity-y (get-entity entity))))
(defun set-coord (entity coord)
  (setf (entity-x (get-entity entity)) (car coord))
  (setf (entity-y (get-entity entity)) (cdr coord)))
(defun set-coord-relative (entity dir &optional (x 1))
  (case dir 
	('up (decf (entity-y (get-entity entity)) x))
	('down (incf (entity-y (get-entity entity)) x))
	('left (decf (entity-x (get-entity entity)) x))
	('right (incf (entity-x (get-entity entity)) x)))
  (setf (entity-x (get-entity entity)) (mod (entity-x (get-entity entity)) *width*))
  (setf (entity-y (get-entity entity)) (mod (entity-y (get-entity entity)) *height*)))
(defun walk (entity dir)
	(set-coord-relative entity dir))
(defun get-entity (entity)
	(gethash entity *entities*))
(defun (setf get-entity) (new-value entity)
	(setf (gethash entity *entities*) new-value))
(defmacro set-entity-val (entity val new-value)
	`(setf (,(intern (concatenate 'string "ENTITY-" (string val))) (get-entity ,entity)) ,new-value))
(defun (setf get-entity-val) (new-value entity val)
	(set-entity-val entity val new-value))
(defun main ()
	(setf erase nil)
	(create-stock-entities)
	(charms:initscr)
	(charms:raw)
	(charms:curs-set 0)
	(charms:nodelay charms:*stdscr* 1)
	(charms:keypad charms:*stdscr* 1)
	(charms:erase)
	(loop with time = (get-universal-time)
		do (if (equal (get-universal-time) time)
				(incf *frames*)
				(progn
					;(charms:move 1 0)
					;(charms:printw (string (car *messages*)))
					;(pop *messages*)
					(setf *fps* *frames* *frames* 0)
					(setf time (get-universal-time))))
		;(if erase
		;	(charms:erase))
		(charms:move 0 0)
		(charms:printw (format nil "FPS: ~d" *fps*))
		(charms:refresh)
		;(sleep 1/20)
		(draw-map 3 0)
		(charms:move (+ *height* 4) 0)
		(setf erase t)
		(charms:move 1 0)
		(charms:printw
			(format nil "Distance: ~$  " (entity-distance 'player 'mob)))
		(charms:move (+ *height* 1 3) 0) (charms:printw (format nil "Version: ~a" *version*))
		(if *messages*
			(progn
				(charms:move *message-row* (+ *width* 10))
				(charms:printw (format nil (format nil "~s             " (string (car *messages*)))))
				(push (car *messages*) *message-history*)
				(pop *messages*)
				(incf *message-row*)
				(setf *message-row* (mod *message-row* 20))))
		
		(let ((cmd (code-char (charms:wgetch charms:*stdscr*))))
			(case cmd
				((#\4 #\h) (walk 'player 'left))
				((#\2 #\j) (walk 'player 'down))
				((#\8 #\k) (walk 'player 'up))
				((#\6 #\l) (walk 'player 'right))
				(#\a (attack 'player 'mob))
				
				(#\q (return))
				(#\Null (setf erase nil))
				(otherwise (push (format nil "~a is not bound." cmd) *messages*)))))
	(charms:endwin))
(defun curses ()
	(charms:initscr)
	(charms:raw)
	(charms:keypad charms:*stdscr* 1)
	(charms:noecho)
	(setf out (string (code-char (charms:wgetch charms:*stdscr*))))
	(charms:printw out)
	(charms:refresh)
	(sleep 1)
	(charms:endwin))
